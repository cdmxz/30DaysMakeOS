     1 00000000                                 ; haribote-os 启动程序
     2 00000000                                 ; TAB=4
     3 00000000                                 [INSTRSET "i486p"]
     4 00000000                                 
     5  = 00000105                              VBEMODE	EQU		0x105		; 1024 x  768 x 8bit 彩色
     6 00000000                                 ; 显示模式，设定时要把画面模式号码值加上0x4000
     7 00000000                                 ;	0x100 :  640 x  400 x 8bit 彩色
     8 00000000                                 ;	0x101 :  640 x  480 x 8bit 彩色
     9 00000000                                 ;	0x103 :  800 x  600 x 8bit 彩色
    10 00000000                                 ;	0x105 : 1024 x  768 x 8bit 彩色
    11 00000000                                 ;	0x107 : 1280 x 1024 x 8bit 彩色
    12 00000000                                 
    13  = 00280000                              BOTPAK	EQU		0x00280000	; 加载bootpack
    14  = 00100000                              DSKCAC	EQU		0x00100000	; 磁盘缓存的位置
    15  = 00008000                              DSKCAC0	EQU		0x00008000	; 磁盘缓存的位置（实模式）
    16 00000000                                 
    17 00000000                                 ; BOOT_INFO
    18  = 00000FF0                              CYLS	EQU		0x0ff0      ;设定引导扇区
    19  = 00000FF1                              LEDS	EQU 	0x0ff1 
    20  = 00000FF2                              VMODE	EQU 	0x0ff2      ;关于颜色数目的信息，颜色的位数
    21  = 00000FF4                              SCRNX	EQU 	0x0ff4      ;分辨率x
    22  = 00000FF6                              SCRNY	EQU 	0x0ff6      ;分辨率y
    23  = 00000FF8                              VRAM	EQU 	0x0ff8      ;图像缓冲区开始的地址
    24 00000000                                 
    25                                          		ORG 	0xc200      ; 用16进制编辑器打开，文件名在0x002600
    26 0000C200                                                             ; 文件内容在0x004200
    27 0000C200                                                             ; 所以启动扇区加载完后跳转到0x7c00（软盘内容装载地址）+0x004200
    28 0000C200                                 ; 画面设置
    29 0000C200                                 ; 确认VBE是否存在
    30 0000C200                                 
    31 0000C200 B8 9000                         		MOV		AX,0x9000
    32 0000C203 8E C0                           		MOV		ES,AX
    33 0000C205 BF 0000                         		MOV		DI,0
    34 0000C208 B8 4F00                         		MOV		AX,0x4f00
    35 0000C20B CD 10                           		INT		0x10
    36 0000C20D 3D 004F                         		CMP		AX,0x004f	; 如果有VBE的话，AX就会变为0x004f
    37 0000C210 75 52                           		JNE		scrn320
    38 0000C212                                 
    39 0000C212                                 ; 检查VBE的版本
    40 0000C212                                 ; 如果VBE的版本不是2.0以上，就不能使用高分辨率
    41 0000C212                                 
    42 0000C212 26 8B 45 04                     		MOV		AX,[ES:DI+4]
    43 0000C216 3D 0200                         		CMP		AX,0x0200
    44 0000C219 72 49                           		JB		scrn320			; if (AX < 0x0200) goto scrn320
    45 0000C21B                                 
    46 0000C21B                                 ; 取得画面模式信息
    47 0000C21B                                 
    48 0000C21B B9 0105                         		MOV		CX,VBEMODE
    49 0000C21E B8 4F01                         		MOV		AX,0x4f01
    50 0000C221 CD 10                           		INT		0x10
    51 0000C223 3D 004F                         		CMP		AX,0x004f
    52 0000C226 75 3C                           		JNE		scrn320
    53 0000C228                                 
    54 0000C228                                 ; 画面模式信息的确认
    55 0000C228 26 80 7D 19 08                  		CMP		BYTE [ES:DI+0x19],8		; 颜色数必须为8
    56 0000C22D 75 35                           		JNE		scrn320
    57 0000C22F 26 80 7D 1B 04                  		CMP		BYTE [ES:DI+0x1b],4		; 颜色的指定方法必须为4(4是调色板模式)
    58 0000C234 75 2E                           		JNE		scrn320
    59 0000C236 26 8B 05                        		MOV		AX,[ES:DI+0x00]			; 模式属性bit7不是1就不能加上0x4000
    60 0000C239 25 0080                         		AND		AX,0x0080
    61 0000C23C 74 26                           		JZ		scrn320					; 模式属性的bit7是0，所以放弃
    62 0000C23E                                 
    63 0000C23E                                 ; 画面模式的切换
    64 0000C23E                                 
    65 0000C23E BB 4105                         		MOV		BX,VBEMODE+0x4000
    66 0000C241 B8 4F02                         		MOV		AX,0x4f02
    67 0000C244 CD 10                           		INT		0x10
    68 0000C246 C6 06 0FF2 08                   		MOV		BYTE [VMODE],8	; 屏幕的模式
    69 0000C24B 26 8B 45 12                     		MOV		AX,[ES:DI+0x12]
    70 0000C24F A3 0FF4                         		MOV		[SCRNX],AX
    71 0000C252 26 8B 45 14                     		MOV		AX,[ES:DI+0x14]
    72 0000C256 A3 0FF6                         		MOV		[SCRNY],AX
    73 0000C259 66 26 8B 45 28                  		MOV		EAX,[ES:DI+0x28] ;VRAM的地址
    74 0000C25E 66 A3 0FF8                      		MOV		[VRAM],EAX
    75 0000C262 EB 20                           		JMP		keystatus
    76 0000C264                                 
    77 0000C264                                 scrn320:	; 没有VBE就只能使用320×200的画面
    78 0000C264 B0 13                           		MOV		AL,0x13						; VGA图、320x200x8bit彩色
    79 0000C266 B4 00                           		MOV		AH,0x00
    80 0000C268 CD 10                           		INT		0x10 ;调用显卡bios函数
    81 0000C26A                                 		 ;将画面模式，分辨率保存到内存
    82 0000C26A C6 06 0FF2 08                   		MOV		BYTE [VMODE],8	
    83 0000C26F C7 06 0FF4 0140                 		MOV		WORD [SCRNX],320
    84 0000C275 C7 06 0FF6 00C8                 		MOV		WORD [SCRNY],200
    85 0000C27B 66 C7 06 0FF8 000A0000          		MOV		DWORD [VRAM],0x000a0000
    86 0000C284                                 
    87 0000C284                                 ;用BIOS取得键盘上各种LED指示灯的状态
    88 0000C284                                 keystatus:
    89 0000C284 B4 02                           		MOV AH,0x02
    90 0000C286 CD 16                           		INT 0x16         ;键盘BIOS函数
    91 0000C288 A2 0FF1                         		MOV [LEDS],AL
    92 0000C28B                                 
    93 0000C28B                                 		; PIC关闭一切中断
    94 0000C28B                                 		; 根据AT兼容机的规格，如果要初始化PIC，
    95 0000C28B                                 		; 必须在CLI之前进行，否则偶尔会死机
    96 0000C28B                                 		; 随后进行PIC的初始化。
    97 0000C28B                                         ; 等同于以下内容的C程序。
    98 0000C28B                                         ; io_out(PIC0_IMR, 0xff); /* 禁止主PIC的全部中断 */
    99 0000C28B                                         ; io_out(PIC1_IMR, 0xff); /* 禁止从PIC的全部中断 */
   100 0000C28B                                         ; io_cli(); /* 禁止CPU级别的中断*/
   101 0000C28B B0 FF                           		MOV		AL,0xff
   102 0000C28D E6 21                           		OUT		0x21,AL
   103 0000C28F 90                              		NOP						; 如果连续执行OUT指令，有些机种会无法正常运行
   104 0000C290 E6 A1                           		OUT		0xa1,AL
   105 0000C292                                 
   106 0000C292 FA                              		CLI						; 禁止CPU级别的中断
   107 0000C293                                 
   108 0000C293                                 
   109 0000C293                                 ; 为了让CPU能够访问1MB以上的内存空间，设定A20GAT
   110 0000C293                                 
   111 0000C293 E8 00B5                         		CALL	waitkbdout
   112 0000C296 B0 D1                           		MOV		AL,0xd1
   113 0000C298 E6 64                           		OUT		0x64,AL
   114 0000C29A E8 00AE                         		CALL	waitkbdout
   115 0000C29D B0 DF                           		MOV		AL,0xdf			; 让A20GATE信号线变成ON的状态
   116 0000C29F E6 60                           		OUT		0x60,AL
   117 0000C2A1 E8 00A7                         		CALL	waitkbdout
   118 0000C2A4                                 
   119 0000C2A4                                 ; 切换到保护模式
   120 0000C2A4                                 [INSTRSET "i486p"]				; 说明使用486指令 为了能够使用386以后的LGDT，EAX，CR0等关键字
   121 0000C2A4                                 
   122 0000C2A4 0F 01 16 C38A                   		LGDT	[GDTR0]			; 设置临时GDT
   123 0000C2A9                                         ; 将CR0寄存器的最高位置为0，最低位置为1进入保护模式
   124 0000C2A9 0F 20 C0                        		MOV		EAX,CR0
   125 0000C2AC 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	; 设置bit31为0（禁止分页）
   126 0000C2B2 66 83 C8 01                     		OR		EAX,0x00000001	; 将bit0设为1（为了切换到保护模式）
   127 0000C2B6 0F 22 C0                        		MOV		CR0,EAX
   128 0000C2B9 EB 00                           		JMP		pipelineflush   ; 切换到保护模式时，要马上执行JMP指令
   129 0000C2BB                                 pipelineflush:
   130 0000C2BB B8 0008                         		MOV		AX,1*8			; 可读写的段 32bit
   131 0000C2BE 8E D8                           		MOV		DS,AX
   132 0000C2C0 8E C0                           		MOV		ES,AX
   133 0000C2C2 8E E0                           		MOV		FS,AX
   134 0000C2C4 8E E8                           		MOV		GS,AX
   135 0000C2C6 8E D0                           		MOV		SS,AX
   136 0000C2C8                                 
   137 0000C2C8                                 ; bootpack的转送
   138 0000C2C8                                 ; memcpy(bootpack, BOTPAK, 512*1024/4); 
   139 0000C2C8                                 ; 从bootpack的地址开始的512KB内容复制到0x00280000号地址去
   140 0000C2C8                                 ; haribote.sys是通过asmhead.bin和bootpack.hrb连接起来而生成的
   141 0000C2C8                                 ; 所以asmhead结束的地方，紧接着串连着bootpack.hrb最前面的部分。
   142 0000C2C8                                 
   143 0000C2C8 66 BE 0000C390                  		MOV		ESI,bootpack	; 源
   144 0000C2CE 66 BF 00280000                  		MOV		EDI,BOTPAK		; 目标
   145 0000C2D4 66 B9 00020000                  		MOV		ECX,512*1024/4
   146 0000C2DA E8 0077                         		CALL	memcpy
   147 0000C2DD                                 
   148 0000C2DD                                 ; 磁盘数据最终转送到它本来的位置去
   149 0000C2DD                                 
   150 0000C2DD                                 ; 首先从启动扇区开始
   151 0000C2DD 66 BE 00007C00                  		MOV		ESI,0x7c00		; 转送源
   152 0000C2E3 66 BF 00100000                  		MOV		EDI,DSKCAC		; 转送目标
   153 0000C2E9 66 B9 00000080                  		MOV		ECX,512/4
   154 0000C2EF E8 0062                         		CALL	memcpy
   155 0000C2F2                                         ; 上面几句 = memcpy(0x7c00, DSKCAC, 512/4);
   156 0000C2F2                                         ; 转送数据大小是以双字（4字节）为单位的，所以数据大小用字节数除以4来指定
   157 0000C2F2                                         ; 表示是将启动扇区复制到1MB以后的内存
   158 0000C2F2                                         ; memcpy(转送源地址, 转送目的地址, 转送数据的大小);
   159 0000C2F2                                 ; 所有剩下的
   160 0000C2F2                                         ; memcpy(DSKCAC0+512, DSKCAC+512, cyls * 512*18*2/4-512/4);
   161 0000C2F2 66 BE 00008200                  		MOV		ESI,DSKCAC0+512	; 转送源
   162 0000C2F8 66 BF 00100200                  		MOV		EDI,DSKCAC+512	; 转送目标
   163 0000C2FE 66 B9 00000000                  		MOV		ECX,0
   164 0000C304 8A 0E 0FF0                      		MOV		CL,BYTE [CYLS]
   165 0000C308 66 69 C9 00001200               		IMUL	ECX,512*18*2/4	; 从柱面数变换为字节数/4
   166 0000C30F 66 81 E9 00000080               		SUB		ECX,512/4		; 减去 IPL
   167 0000C316 E8 003B                         		CALL	memcpy
   168 0000C319                                 
   169 0000C319                                 ; 必须由asmhead来完成的工作，至此全部完毕
   170 0000C319                                 ; 以后就交由bootpack来完成
   171 0000C319                                 ; bootpack的启动
   172 0000C319 66 BB 00280000                  		MOV		EBX,BOTPAK
   173 0000C31F 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]
   174 0000C324 66 83 C1 03                     		ADD		ECX,3			; ECX += 3;
   175 0000C328 66 C1 E9 02                     		SHR		ECX,2			; ECX /= 4;
   176 0000C32C 74 10                           		JZ		skip			; 没有要转送的东西时
   177 0000C32E 67 66 8B 73 14                  		MOV		ESI,[EBX+20]	; 转送源
   178 0000C333 66 01 DE                        		ADD		ESI,EBX
   179 0000C336 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	; 转送目的地
   180 0000C33B E8 0016                         		CALL	memcpy          ; 将bootpack.hrb第0x10c8字节开始
   181 0000C33E                                                                 ; 的0x11a8字节复制到0x00310000号地址去
   182 0000C33E                                 skip:
   183 0000C33E 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	; 栈初始值
   184 0000C343 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x0000001b
   185 0000C34B                                 
   186 0000C34B                                 waitkbdout:
   187 0000C34B E4 64                           		IN		 AL,0x64
   188 0000C34D 24 02                           		AND		 AL,0x02
   189 0000C34F E4 60                                   IN       AL,0x60        ; 清空数据接收缓冲区中的垃圾数据
   190 0000C351                                         ;如果控制器里有键盘代码，或者是鼠标数据 那就清空
   191 0000C351 75 F8                           		JNZ		waitkbdout		; AND的结果如果不是0，就跳到waitkbdout
   192 0000C353 C3                              		RET
   193 0000C354                                         
   194 0000C354                                 ; memcpy(转送源地址, 转送目的地址, 转送数据的大小);
   195 0000C354                                 memcpy:
   196 0000C354 67 66 8B 06                     		MOV		EAX,[ESI]
   197 0000C358 66 83 C6 04                     		ADD		ESI,4
   198 0000C35C 67 66 89 07                     		MOV		[EDI],EAX
   199 0000C360 66 83 C7 04                     		ADD		EDI,4
   200 0000C364 66 83 E9 01                     		SUB		ECX,1
   201 0000C368 75 EA                           		JNZ		memcpy			; 减法运算的结果如果不是0，就跳转到memcpy
   202 0000C36A C3                              		RET
   203 0000C36B                                 ; memcpyはアドレスサイズプリフィクスを入れ忘れなければ、ストリング命令でも書ける
   204 0000C36B                                 
   205 0000C36B 00 00 00 00 00                  		ALIGNB	16
   206 0000C370                                 GDT0:
   207 0000C370 00 00 00 00 00 00 00 00         		RESB	8				; NULL selector
   208 0000C378 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf	 ; 可以读写的段（segment）32bit
   209 0000C380 FFFF 0000 9A28 0047                     DW      0xffff,0x0000,0x9a28,0x0047 ; 可以执行的段（segment）32bit（bootpack用）
   210 0000C388                                 
   211 0000C388 0000                            		DW		0
   212 0000C38A                                 GDTR0:
   213 0000C38A 0017                            		DW		8*3-1
   214 0000C38C 0000C370                        		DD		GDT0
   215 0000C390                                 
   216 0000C390                                 		ALIGNB	16
   217 0000C390                                 bootpack:
